{"version":3,"sources":["components/Chart.jsx","components/Description.jsx","App.js","reportWebVitals.js","index.js"],"names":["TestChart","props","state","showApprovalChange","showNumberOfTweets","showAveragedApproval","brushStatistics","brushStartDate","brushEndDate","totalTweets","averageTweets","averageApprovalChange","totalApprovalChange","PCC","toggleVisibility","bind","updateStatistics","dataset","this","setState","e","combinedBrush","combinedData","slice","startIndex","endIndex","absBrush","absData","console","log","date","length","dailyTweetArray","map","item","numberOfTweets","reduce","accumulator","currentValue","parseFloat","toFixed","dailyApprovalChangeArray","approvalChange","stats","Statistics","correlationCoefficient","width","window","innerWidth","height","innerHeight","ComposedChart","data","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","ReferenceLine","y","stroke","Brush","onChange","x","Bar","entry","index","Cell","fill","Line","type","Checkbox","defaultChecked","color","id","className","Component","Description","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f0fb22bb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport {\n  ComposedChart, Brush, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ReferenceLine, Line\n} from 'recharts';\nimport combinedData from '/Users/grant/Desktop/Trumpproval/src/convert/transformed_data/combined.json'; \nimport absData from '/Users/grant/Desktop/Trumpproval/src/convert/transformed_data/absCombined.json'; \nimport Statistics from 'statistics.js'; \n\n\nexport default class TestChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showApprovalChange: true,\n      showNumberOfTweets: true,\n      showAveragedApproval: false,\n      brushStatistics: {\n        brushStartDate: \"Jan. 23, 2017\",\n        brushEndDate: \"May. 3, 2017\",\n        totalTweets: 516,\n        averageTweets: 5.11,\n        averageApprovalChange: -0.03, \n        totalApprovalChange: -2.75,\n        PCC: 0.18\n      }\n    }\n    this.toggleVisibility = this.toggleVisibility.bind(this);\n    this.updateStatistics = this.updateStatistics.bind(this);\n  }\n\n  toggleVisibility(dataset) {\n    this.setState({[dataset]: !this.state[dataset]})\n  }\n\n  updateStatistics(e) {\n    let combinedBrush = combinedData.slice(e.startIndex,e.endIndex + 1);\n    let absBrush = absData.slice(e.startIndex,e.endIndex + 1);\n    console.log(combinedBrush);\n\n    let brushStartDate = combinedBrush[0].date;\n    let brushEndDate = combinedBrush[combinedBrush.length - 1].date;\n\n    let dailyTweetArray = combinedBrush.map( (item) => {\n      return item.numberOfTweets;\n    });\n\n    let totalTweets = dailyTweetArray.reduce((accumulator, currentValue) => accumulator + currentValue);\n\n    let averageTweets = parseFloat((totalTweets / dailyTweetArray.length).toFixed(2));\n\n    let dailyApprovalChangeArray = combinedBrush.map( (item) => {\n      return item.approvalChange;\n    })\n\n    let totalApprovalChange = parseFloat(dailyApprovalChangeArray.reduce((accumulator, currentValue) => accumulator + currentValue).toFixed(2));\n        \n    let averageApprovalChange = parseFloat((totalApprovalChange / dailyApprovalChangeArray.length).toFixed(2));\n\n    let statsColumns = {\n      approvalChange: \"metric\",\n      numberOfTweets: \"metric\"\n    }\n\n    let stats = new Statistics(absBrush, statsColumns);\n    \n    let PCC = parseFloat((stats.correlationCoefficient(\"approvalChange\",\"numberOfTweets\").correlationCoefficient).toFixed(2));\n\n    this.setState({\n      brushStatistics: {\n        brushStartDate,\n        brushEndDate,\n        totalTweets,\n        averageTweets,\n        averageApprovalChange,\n        totalApprovalChange,\n        PCC\n      }\n    })\n  }\n\n  render() {\n\n    let width = window.innerWidth;\n    let height = window.innerHeight;\n    return (\n      \n      <div>\n        <ComposedChart\n        width={width * 0.8}\n        height={height * 0.5}\n        data={combinedData}\n        margin={{\n          top: 5, right: 30, left: 20, bottom: 5,\n        }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"date\"/>\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <ReferenceLine y={0} stroke=\"#000\" />\n          <Brush dataKey='date' onChange={(e) => {this.updateStatistics(e)}} x={width * 0.1} width={width * 0.6} endIndex={100} height={50} stroke=\"#000000\"/>\n          <Bar dataKey={this.state.showApprovalChange === true ? \"approvalChange\" : \"approvalChange \"}>\n          {\n            combinedData.map((entry, index) => (\n              <Cell key={index} fill={entry.approvalChange >= 0 ? \"#66ff00\" : \"#FF0000\"} />\n            ))\n          }\n\n          </Bar>\n          <Line type=\"monotone\" dataKey={this.state.showNumberOfTweets === true ? \"numberOfTweets\" : \"numberOfTweets \"} stroke=\"#FFC0CB\" />\n          <Line type=\"monotone\" dataKey={this.state.showAveragedApproval === true ? \"averagedApproval\" : \"averagedApproval \"} stroke=\"#FFA500\" />\n        </ComposedChart>\n\n        <div>\n          <Checkbox defaultChecked onChange={() => this.toggleVisibility(\"showApprovalChange\")}color=\"primary\"/>Show <span id=\"approval-change-span\">Approval Change Bar</span>\n          <Checkbox defaultChecked onChange={() => this.toggleVisibility(\"showNumberOfTweets\")}color=\"primary\"/>Show <span id=\"number-of-tweets-span\">Number Of Tweets Line</span>\n          <Checkbox onChange={() => this.toggleVisibility(\"showAveragedApproval\")}color=\"primary\"/>Show <span id=\"averaged-approval-span\">Overall Approval Line</span>\n        </div>\n\n        <h1>Between <span>{this.state.brushStatistics.brushStartDate}</span> and <span>{this.state.brushStatistics.brushEndDate}</span>, Donald Trump:  </h1>\n    <p className=\"statistics\">Averaged a total of <span>{this.state.brushStatistics.averageTweets}</span> tweets on a daily basis.</p>\n    <p className=\"statistics\">Tweeted a total of <span>{this.state.brushStatistics.totalTweets}</span> times.</p>\n    {/* Averaged a daily approval shift of {this.state.brushStatistics.averageApprovalChange}. */}\n    <p className=\"statistics\">Experienced an overall shift of <span>{this.state.brushStatistics.totalApprovalChange}</span> in his approval rating.</p>\n    <p className=\"statistics\">Had a PCC of <span>{this.state.brushStatistics.PCC}</span> between his daily tweet count and approval rating shift.</p>\n\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Description extends Component {\n    render() {\n        return (\n            \n            <div className=\"flex-wrapper\">\n                <span className=\"header\">\n                    Trumpproval\n                </span>\n                <p className=\"description\">\n                I modified and combined other data sets to create a data set containing Donald Trump's daily shift in approval rating (according to 538), his overall approval rating as an average of different polls, and the number of tweets for each calendar day between January 2017 to January 2021. I had a theory that a greater shift in approval rating would result in a higher number of tweets. To my surprise, there seems to be no correlation at all between the two, as the <a href=\"https://en.wikipedia.org/wiki/Pearson_correlation_coefficient\">Pearson correlation coefficient</a> between the two data sets is <span className=\"correlation\">-0.03</span> (a PCC of 0 means there is no correlation whatsoever).\n                <br/><br/>\n                The values below are calculated based on the timeframe that is highlighted in the brush underneath the chart. Moving the brush will update the values. Contracting/expanding the brush will zoom in/out on the chart.\n                </p>\n            </div>\n        )\n    }\n}\n","import Chart from './components/Chart.jsx'; \nimport Description from './components/Description.jsx'; \nimport \"./App.css\";\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Description></Description>\n      <Chart></Chart>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}